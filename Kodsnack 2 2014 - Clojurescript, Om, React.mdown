# Titlar #
Javascripts dumheter i bakgrunden
Javas dumheter i bakgrunden
Inte helt vansinnigt
Att göra det lite svårt för sig
Det borde finnas fler ord
Man hamnar i ett annat träsk
Man blandar lite mer friskt
Allting är en enda röra
XML rätt ut i luften
Abstrahera bort det imperativa
Någonstans mitt i
Hemsk mutation
Det finns något konstigt i botten
Det slutar alltid med att jag sitter och kollar på video
När jag oundvikligen hamnar i problem
Det felaktiga tänket
Frågan ingen skulle ställa
Ta sig tid att göra handarbetet
Fast i sitt egna tänk
Tvingas stå i den andras position
Någon annans tankeflöde
Internalisera, tror jag
Ibland är det svårare än annars att prata svenska
Inte lika mycket klister emellan
Inte ens Wikipedia skriver rakt ut vad skillnaden är
Om man har ett program som inte har någon logik
Jag kollar mest på video
En speciell typ som är ingenting
Lätt typat

# Kodsnack 37 - Allting är en enda röra #
Vi snackar javascriptramverket React, Clojure, Closure och hur man sätter sig in i något nytt. Dessutom tar vi upp värdet i att skriva av exempel, läsa hela texter och se hela videor och vår egen tålamodsbrist när det gäller att lära oss nya saker och förstå tänket bakom dem. Som eftersnack beskriver Kristoffer Elixir och fördelarna med Haskells typsystem.

## Länkar ##
* [React](http://facebook.github.io/react/)
* [MVC - Model-view-controller](http://en.wikipedia.org/wiki/Model–view–controller)
* [Oföränderlig data - immutable data](http://en.wikipedia.org/wiki/Immutable_object)
* [DOM - dokumentobjektmodellen för webbsidor](http://en.wikipedia.org/wiki/Document_Object_Model)
* [Om - "ett closuregränssnitt till React"](https://github.com/swannodette/om)
* [Knockout - ramverk med mer fokus på "klassisk" databindning](http://knockoutjs.com)
* [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame)
* [Clojurescript](http://clojure.org/clojurescript)
* [Clojure](http://clojure.org), [Lisp](http://en.wikipedia.org/wiki/LISP) och [Scheme](http://en.wikipedia.org/wiki/Scheme_(programming_language%29)
* [Clojure programming - bok](http://shop.oreilly.com/product/0636920013754.do)
* [Programming Clojure - bok](http://pragprog.com/book/shcloj/programming-clojure)
* [Kompilatorn Closure](https://developers.google.com/closure/?hl=sv&csw=1)
* [Templates - mallar i webbutvecklingssammanhang](http://en.wikipedia.org/wiki/Web_template)
* [JSX i React](http://facebook.github.io/react/docs/jsx-in-depth.html)
* [Scala](http://www.scala-lang.org)
* [Deklarativ programmering](http://en.wikipedia.org/wiki/Declarative_programming)
* [Edge cases](http://en.wikipedia.org/wiki/Edge_case)
* [Edge cases - trevligt poddprogram om oftast applerelaterad utveckling](http://edgecasesshow.com)
* [MVVM - Model view viewmodel](http://en.wikipedia.org/wiki/MVVM)

## Eftersnack ##
* [Video om programmering i Elixir](http://mirror.linux.org.au/pub/linux.conf.au/2014/Thursday/80-Programming_Elixir_The_magic_of_todays_tonic_-_Katie_Miller.mp4)
* [Erlang](http://www.erlang.org)
* [Haskell](http://www.haskell.org/haskellwiki/Haskell)
* [Haskells typsystem](http://stackoverflow.com/questions/3787960/what-makes-haskells-type-system-more-powerful-than-other-languages-type-syst)
* [Bondage and discipline language](http://www.catb.org/jargon/html/B/bondage-and-discipline-language.html)
* [Pattern matching](http://en.wikipedia.org/wiki/Pattern_matching)
* [Prolog](http://en.wikipedia.org/wiki/Prolog)
* [Erlang the movie](https://archive.org/details/ErlangTheMovie)
* [Erlangs typsystem](http://learnyousomeerlang.com/types-or-lack-thereof)